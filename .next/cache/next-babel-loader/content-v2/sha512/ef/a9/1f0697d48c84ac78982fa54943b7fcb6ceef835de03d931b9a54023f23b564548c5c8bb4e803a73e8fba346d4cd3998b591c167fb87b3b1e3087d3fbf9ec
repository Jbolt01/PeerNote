{"ast":null,"code":"import _defineProperty from \"/Users/vijay/PeerNote/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/Users/vijay/PeerNote/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/require-default-props */\nimport { FormControl, FormLabel, Text, FormErrorMessage, Input as ChakraInput } from '@chakra-ui/react';\nimport { forwardRef } from 'react';\nimport { Flex } from '@chakra-ui/react';\n\nvar InputBase = function InputBase(_ref, ref) {\n  var name = _ref.name,\n      label = _ref.label,\n      description = _ref.description,\n      descriptionColor = _ref.descriptionColor,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? null : _ref$error,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"label\", \"description\", \"descriptionColor\", \"error\"]);\n\n  return /*#__PURE__*/_jsxs(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxs(Flex, {\n      children: [!!label && /*#__PURE__*/_jsxs(FormLabel, {\n        htmlFor: name,\n        children: [\" \", label, \" \"]\n      }), !!description && /*#__PURE__*/_jsx(Text, {\n        as: \"cite\",\n        color: descriptionColor,\n        children: description\n      })]\n    }), /*#__PURE__*/_jsx(ChakraInput, _objectSpread({\n      id: name,\n      name: name,\n      focusBorderColor: \"purple.500\",\n      bg: \"purple.550\",\n      variant: \"filled\",\n      _hover: {\n        bgColor: 'purple.550'\n      },\n      size: \"lg\",\n      ref: ref\n    }, rest)), !!error && /*#__PURE__*/_jsx(FormErrorMessage, {\n      children: error.message\n    })]\n  });\n};\n\nexport var Input = /*#__PURE__*/forwardRef(InputBase);","map":null,"metadata":{},"sourceType":"module"}