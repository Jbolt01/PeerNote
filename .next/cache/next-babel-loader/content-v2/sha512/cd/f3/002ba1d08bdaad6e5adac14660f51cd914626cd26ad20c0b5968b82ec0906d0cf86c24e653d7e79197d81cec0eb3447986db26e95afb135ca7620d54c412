{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Button, Icon, Img, Box, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, useDisclosure, VStack, FormControl, useToast } from '@chakra-ui/react';\nimport Head from 'next/head';\nimport { RiAddLine } from 'react-icons/ri';\nimport { getSession, useSession } from 'next-auth/client';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport router from 'next/router';\nimport { Text } from '@chakra-ui/react';\nimport { supabase } from '../../services/supabase';\nimport { api } from '../../services/api';\nimport { Input } from '../../components/form/input';\nimport styles from './styles.module.scss';\nimport { CourseList } from '../../components/CourseList';\nimport { useGetLatestCourses, useGetMostLikedCourses } from '../../services/hooks/useCourses';\nimport useLocale from '../../services/hooks/useLocale';\nconst createCourseFormSchema = yup.object().shape({\n  name: yup.string().max(120, 'Maximum 120 characters').required('Wait, you would not forget the name would you?'),\n  description: yup.string().max(200, 'Maximum 200 characters').required(`Don't forget the description`),\n  image: yup.string().url(),\n  tags: yup.string().lowercase().min(3, 'Come on, at least 3 characters you can do it').max(144, 'Maximum 144 characters').required('Tags are important to help others to find the course :)')\n});\nexport default function Community({\n  currentUser\n}) {\n  const [session] = useSession();\n  const toast = useToast();\n  const t = useLocale();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const currentUserId = currentUser === null || currentUser === void 0 ? void 0 : currentUser.id;\n  const {\n    data: latestCoursesData,\n    isLoading: isLoadingLatestCoursesData,\n    isFetching: isFetchingLatestCoursesData,\n    error: errLatestCoursesData\n  } = useGetLatestCourses();\n  const {\n    data: mostLikedCoursesData,\n    isLoading: isLoadingMostLikedCoursesData,\n    isFetching: isFetchingMostLikedCoursesData,\n    error: errMostLikedCoursesData\n  } = useGetMostLikedCourses();\n  const {\n    register,\n    handleSubmit,\n    formState,\n    errors\n  } = useForm({\n    resolver: yupResolver(createCourseFormSchema)\n  });\n\n  const handleCreateCourse = async values => {\n    const response = await api.post('api/supaRequests', {\n      headers: {\n        type: 'community-create-course'\n      },\n      values,\n      currentUserId\n    });\n    onClose();\n\n    if (response.status === 200) {\n      toast({\n        title: `${t.communityPage.toast.title}`,\n        description: `${t.communityPage.toast.description}`,\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n        position: 'top-right',\n        onCloseComplete: () => router.push(`/community/course/${response.data.newCourseNumberSlug}`)\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsxs(\"title\", {\n        children: [t.communityPage.community, \" | PeerNote\"]\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.main,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.topText,\n        children: [/*#__PURE__*/_jsx(Img, {\n          src: \"/assets/icons/world.svg\",\n          alt: \"world, pretty handsome huh?\"\n        }), /*#__PURE__*/_jsx(Text, {\n          fontSize: ['4xl'],\n          fontWeight: \"bold\",\n          ml: \"2\",\n          children: t.communityPage.community\n        })]\n      }), /*#__PURE__*/_jsx(CourseList, {\n        title: t.communityPage.latestCourses,\n        coursesArray: latestCoursesData,\n        isLoading: isLoadingLatestCoursesData,\n        isFetching: isFetchingLatestCoursesData,\n        error: errLatestCoursesData\n      }), /*#__PURE__*/_jsx(CourseList, {\n        title: t.communityPage.topLiked,\n        coursesArray: mostLikedCoursesData,\n        isLoading: isLoadingMostLikedCoursesData,\n        isFetching: isFetchingMostLikedCoursesData,\n        error: errMostLikedCoursesData\n      }), !!session && /*#__PURE__*/_jsx(Button, {\n        colorScheme: \"green\",\n        position: \"fixed\",\n        bottom: \"36px\",\n        right: \"36px\",\n        w: \"16\",\n        h: \"16\",\n        alignItems: \"center\",\n        borderRadius: \"full\",\n        size: \"lg\",\n        fontSize: \"lg\",\n        onClick: onOpen,\n        children: /*#__PURE__*/_jsx(Icon, {\n          as: RiAddLine,\n          fontSize: \"36\"\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Modal, {\n      isCentered: true,\n      size: \"3xl\",\n      onClose: onClose,\n      isOpen: isOpen,\n      motionPreset: \"slideInBottom\",\n      blockScrollOnMount: false,\n      children: [/*#__PURE__*/_jsx(ModalOverlay, {}), /*#__PURE__*/_jsxs(ModalContent, {\n        bg: \"green.900\",\n        children: [/*#__PURE__*/_jsx(ModalHeader, {\n          children: t.communityPage.form.newCourse\n        }), /*#__PURE__*/_jsx(ModalBody, {\n          children: /*#__PURE__*/_jsx(FormControl, {\n            children: /*#__PURE__*/_jsx(Box, {\n              as: \"form\",\n              flex: \"1\",\n              borderRadius: 8,\n              bg: \"green.900\",\n              px: \"8\",\n              py: \"2\",\n              onSubmit: handleSubmit(handleCreateCourse),\n              children: /*#__PURE__*/_jsxs(VStack, {\n                spacing: \"4\",\n                children: [/*#__PURE__*/_jsx(Input, {\n                  name: \"name\",\n                  label: t.communityPage.form.courseName,\n                  description: t.communityPage.form.courseNameEx,\n                  descriptionColor: \"green.300\",\n                  focusBorderColor: \"green.600\",\n                  bg: \"green.700\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'green.800'\n                  },\n                  error: errors.name,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Input, {\n                  name: \"description\",\n                  label: t.communityPage.form.courseDescription,\n                  focusBorderColor: \"green.600\",\n                  bg: \"green.700\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'green.800'\n                  },\n                  error: errors.description,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Input, {\n                  name: \"image\",\n                  label: t.communityPage.form.courseUrl,\n                  focusBorderColor: \"green.600\",\n                  bg: \"green.700\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'green.800'\n                  },\n                  error: errors.image,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Box, {\n                  w: \"100%\",\n                  justify: \"flex-initial\",\n                  children: /*#__PURE__*/_jsx(Input, {\n                    name: \"tags\",\n                    label: t.communityPage.form.tags,\n                    description: t.communityPage.form.tagsEx,\n                    descriptionColor: \"green.300\",\n                    focusBorderColor: \"green.600\",\n                    bg: \"green.700\",\n                    variant: \"filled\",\n                    _hover: {\n                      bgColor: 'green.800'\n                    },\n                    error: errors.tags,\n                    ref: register\n                  })\n                })]\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(ModalFooter, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            as: \"a\",\n            colorScheme: \"whiteAlpha\",\n            variant: \"ghost\",\n            onClick: onClose,\n            children: t.communityPage.form.closeButton\n          }), /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            colorScheme: \"green\",\n            _hover: {\n              bgColor: 'green.600'\n            },\n            ml: \"4\",\n            isLoading: formState.isSubmitting,\n            onClick: handleSubmit(handleCreateCourse),\n            children: t.communityPage.form.createButton\n          })]\n        })]\n      })]\n    })]\n  });\n}\nexport const getServerSideProps = async ({\n  req\n}) => {\n  const session = await getSession({\n    req\n  });\n  const currentUserEmail = session === null || session === void 0 ? void 0 : session.user.email;\n  const {\n    data: currentUser,\n    error\n  } = await supabase.from('users').select('id, name, email, avatar_url, id').eq('email', `${currentUserEmail}`).single();\n  return {\n    props: {\n      currentUser\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}