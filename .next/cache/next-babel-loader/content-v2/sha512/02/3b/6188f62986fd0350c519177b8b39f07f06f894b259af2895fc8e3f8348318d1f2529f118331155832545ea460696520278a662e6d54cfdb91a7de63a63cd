{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { supabase } from '../../../services/supabase';\nexport default NextAuth({\n  providers: [Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\n    scope: 'https://www.googleapis.com/auth/userinfo.email  https://www.googleapis.com/auth/userinfo.profile'\n  })],\n  jwt: {\n    signingKey: process.env.SIGNIN_KEY\n  },\n  callbacks: {\n    async session(session) {\n      return _objectSpread({}, session);\n    },\n\n    async signIn(user, account, profile) {\n      const {\n        name,\n        email,\n        image\n      } = user;\n      const {\n        data: users,\n        error\n      } = await supabase.from('users').select('*').eq('email', email).single(); // if theres a user with the same email as the current user, users.lengh will be 1\n\n      if ((users === null || users === void 0 ? void 0 : users.length) === 0 || users === null) {\n        // an if theres no one with the same email, we will write this new user down\n        await supabase.from('users').insert([{\n          name: `${name}`,\n          avatar_url: `${image}`,\n          email: `${email}`\n        }]);\n      }\n\n      return true;\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/vijay/PeerNote/src/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","Providers","supabase","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","scope","jwt","signingKey","SIGNIN_KEY","callbacks","session","signIn","user","account","profile","name","email","image","data","users","error","from","select","eq","single","length","insert","avatar_url"],"mappings":";;;;;;AAEA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,eAAeF,QAAQ,CAAC;AACtBG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd,oGAJa;AAKfC,IAAAA,KAAK,EACH;AANa,GAAjB,CADS,CADW;AAWtBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAER,OAAO,CAACC,GAAR,CAAYQ;AADrB,GAXiB;AActBC,EAAAA,SAAS,EAAE;AACT,UAAMC,OAAN,CAAcA,OAAd,EAAuB;AACrB,+BACKA,OADL;AAGD,KALQ;;AAOT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,KAAR;AAAeC,QAAAA;AAAf,UAAyBL,IAA/B;AAEA,YAAM;AAAEM,QAAAA,IAAI,EAAEC,KAAR;AAAeC,QAAAA;AAAf,UAAyB,MAAMzB,QAAQ,CAC1C0B,IADkC,CAC7B,OAD6B,EAElCC,MAFkC,CAE3B,GAF2B,EAGlCC,EAHkC,CAG/B,OAH+B,EAGtBP,KAHsB,EAIlCQ,MAJkC,EAArC,CAHmC,CASnC;;AACA,UAAI,CAAAL,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEM,MAAP,MAAkB,CAAlB,IAAuBN,KAAK,KAAK,IAArC,EAA2C;AACzC;AACA,cAAMxB,QAAQ,CAAC0B,IAAT,CAAc,OAAd,EAAuBK,MAAvB,CAA8B,CAClC;AACEX,UAAAA,IAAI,EAAG,GAAEA,IAAK,EADhB;AAEEY,UAAAA,UAAU,EAAG,GAAEV,KAAM,EAFvB;AAGED,UAAAA,KAAK,EAAG,GAAEA,KAAM;AAHlB,SADkC,CAA9B,CAAN;AAOD;;AAED,aAAO,IAAP;AACD;;AA7BQ;AAdW,CAAD,CAAvB","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\n\nimport { supabase } from '../../../services/supabase';\n\nexport default NextAuth({\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorizationUrl:\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\n      scope:\n        'https://www.googleapis.com/auth/userinfo.email  https://www.googleapis.com/auth/userinfo.profile',\n    }),\n  ],\n  jwt: {\n    signingKey: process.env.SIGNIN_KEY,\n  },\n  callbacks: {\n    async session(session) {\n      return {\n        ...session,\n      };\n    },\n\n    async signIn(user, account, profile) {\n      const { name, email, image } = user;\n\n      const { data: users, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', email)\n        .single();\n\n      // if theres a user with the same email as the current user, users.lengh will be 1\n      if (users?.length === 0 || users === null) {\n        // an if theres no one with the same email, we will write this new user down\n        await supabase.from('users').insert([\n          {\n            name: `${name}`,\n            avatar_url: `${image}`,\n            email: `${email}`,\n          },\n        ]);\n      }\n\n      return true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}