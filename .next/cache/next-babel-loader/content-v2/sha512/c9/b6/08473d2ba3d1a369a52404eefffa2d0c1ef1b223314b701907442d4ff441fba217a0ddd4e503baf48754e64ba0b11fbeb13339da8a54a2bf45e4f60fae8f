{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable react/no-unescaped-entities */\nimport { Text, Img, Spacer, Button, Icon, Box, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, useDisclosure, VStack, HStack, FormControl, useToast } from '@chakra-ui/react';\nimport Head from 'next/head';\nimport router from 'next/router';\nimport { useState, useEffect } from 'react';\nimport { getSession, useSession } from 'next-auth/client';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { FiPaperclip } from 'react-icons/fi';\nimport { AiFillHeart, AiOutlineHeart } from 'react-icons/ai';\nimport { supabase } from '../../../services/supabase';\nimport { Input } from '../../../components/form/input';\nimport { NotFound } from '../../../components/NotFound';\nimport { api } from '../../../services/api';\nimport { MaterialList } from '../../../components/MaterialList';\nimport { useGetLatestMaterials, useGetTopLikedMaterials } from '../../../services/hooks/useMaterials';\nimport useLocale from '../../../services/hooks/useLocale';\nimport { incrementCourseView } from '../../../services/hooks/useCourses';\nconst createMaterialFormSchema = yup.object().shape({\n  name: yup.string().max(120, 'Maximum 120 characters').required('Wait, you would not forget the name would you?'),\n  description: yup.string().max(200, 'Maximum 200 characters').required(`Don't forget the description`),\n  image: yup.string().url(),\n  link: yup.string().url().required('Material link required'),\n  tags: yup.string().lowercase().min(3, 'Come on, at least 3 characters you can do it').max(144, 'Maximum 144 characters').required('Tags are important to help others to find the course :)')\n});\nexport default function CoursePage({\n  singleCourseData,\n  currentUser,\n  courseLiked\n}) {\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(courseLiked);\n  const [session] = useSession();\n  const toast = useToast();\n  const t = useLocale();\n  useEffect(() => {\n    incrementCourseView(singleCourseData.id);\n  }, []);\n  const currentUserId = currentUser === null || currentUser === void 0 ? void 0 : currentUser.id;\n  const courseId = singleCourseData === null || singleCourseData === void 0 ? void 0 : singleCourseData.id;\n  const {\n    data: latestsMaterialsData,\n    isLoading: isLoadingLatestMaterials,\n    isFetching: isFetchingLatestMaterials,\n    error: errorLatestMaterials\n  } = useGetLatestMaterials(courseId);\n  const {\n    data: topMaterialsData,\n    isLoading: isLoadingTopMaterials,\n    isFetching: isFetchingTopMaterials,\n    error: errorTopMaterials\n  } = useGetTopLikedMaterials(courseId);\n  const {\n    register,\n    handleSubmit,\n    formState,\n    errors\n  } = useForm({\n    resolver: yupResolver(createMaterialFormSchema)\n  });\n\n  const handleCreateMaterial = async values => {\n    const response = await api.post('/api/supaRequests', {\n      headers: {\n        type: 'course-create-material'\n      },\n      values,\n      currentUserId,\n      courseId\n    });\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    onClose();\n    toast({\n      title: `${t.coursePage.toast.title}`,\n      description: `${t.coursePage.toast.description}`,\n      status: 'success',\n      duration: 2000,\n      isClosable: true,\n      position: 'top-right',\n      onCloseComplete: () => router.push(`/community/summary/${response.data.newMaterialId}`)\n    });\n  };\n\n  const handleLikeCourse = async () => {\n    if (session) {\n      if (liked === false) {\n        setLiked(!liked);\n        const response = await api.post('/api/supaRequests', {\n          headers: {\n            type: 'course-like-course'\n          },\n          currentUserId,\n          courseId\n        });\n      } else {\n        setLiked(!liked);\n        const response = await api.post('/api/supaRequests', {\n          headers: {\n            type: 'course-unlike-course'\n          },\n          currentUserId,\n          courseId\n        });\n      }\n    }\n  };\n\n  if (singleCourseData === null) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Head, {\n        children: /*#__PURE__*/_jsx(\"title\", {\n          children: t.page404.tabMessage\n        })\n      }), /*#__PURE__*/_jsx(NotFound, {})]\n    });\n  }\n\n  const course = singleCourseData;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: course.name\n      })\n    }), /*#__PURE__*/_jsxs(Box, {\n      w: \"90%\",\n      mx: \"auto\",\n      display: {\n        md: 'flex'\n      },\n      maxWidth: 1080,\n      marginTop: 12,\n      marginBottom: 4,\n      border: \"1px\",\n      borderColor: \"green.700\",\n      borderRadius: \"2xl\",\n      justifyContent: \"center\",\n      children: [/*#__PURE__*/_jsx(Box, {\n        position: \"relative\",\n        maxHeight: {\n          sm: '240px',\n          md: 'xl',\n          lg: 'xl'\n        },\n        h: {\n          lg: 'xl',\n          md: 'xl',\n          sm: '240px'\n        },\n        w: {\n          sm: '100%',\n          md: '50%',\n          lg: '50%'\n        },\n        borderRadius: \"2xl\",\n        children: /*#__PURE__*/_jsx(Img, {\n          maxHeight: {\n            lg: 'xl',\n            md: 'xl',\n            sm: '240px'\n          },\n          h: {\n            lg: 'xl',\n            md: 'xl',\n            sm: '240px'\n          },\n          w: \"50%\",\n          boxSize: \"100%\",\n          objectFit: \"cover\",\n          src: course.image !== '' ? course.image : '/assets/illustrations/courseImg.jpg',\n          fallbac: \"/assets/illustrations/courseImg.jpg\",\n          alt: \"Course Image\",\n          borderRadius: \"2xl\"\n        })\n      }), /*#__PURE__*/_jsxs(VStack, {\n        h: {\n          md: 'xl',\n          sm: 'md'\n        },\n        w: {\n          sm: '100%',\n          md: '50%',\n          lg: '50%'\n        },\n        bg: \"purple.900\",\n        minWidth: {\n          md: '50%',\n          lg: '50%'\n        },\n        alignItems: \"left\",\n        borderBottomRadius: \"2xl\",\n        borderTopRightRadius: \"2xl\",\n        children: [/*#__PURE__*/_jsx(Text, {\n          mb: ['1', '2', '4'],\n          fontWeight: \"700\",\n          fontSize: ['xl', '2xl', '3xl'],\n          lineHeight: \"9\",\n          px: ['6', '8'],\n          pt: ['2', '3', '6'],\n          children: course.name\n        }), /*#__PURE__*/_jsx(Text, {\n          px: ['6', '8'],\n          lineHeight: \"5\",\n          color: \"green.600\",\n          noOfLines: 6,\n          fontSize: ['sm', 'md', 'lg'],\n          children: course.description\n        }), /*#__PURE__*/_jsx(Spacer, {}), /*#__PURE__*/_jsx(Box, {\n          align: \"right\",\n          w: \"100%\",\n          children: /*#__PURE__*/_jsx(HStack, {\n            w: \"16\",\n            bgColor: \"green.900\",\n            borderBottomRightRadius: \"2xl\",\n            borderTopLeftRadius: \"2xl\",\n            children: /*#__PURE__*/_jsx(Button, {\n              pl: \"5\",\n              size: \"lg\",\n              color: \"green.500\",\n              variant: \"unstyled\",\n              fontSize: \"2xl\",\n              justifyContent: \"center\",\n              onClick: handleLikeCourse,\n              isDisabled: !session,\n              children: liked ? /*#__PURE__*/_jsx(AiFillHeart, {}) : /*#__PURE__*/_jsx(AiOutlineHeart, {})\n            })\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(Box, {\n      w: \"90%\",\n      mx: \"auto\",\n      my: 12,\n      maxWidth: 1080,\n      justifyContent: \"center\",\n      children: [/*#__PURE__*/_jsx(MaterialList, {\n        title: t.coursePage.topSummaries,\n        materialArray: topMaterialsData,\n        isLoading: isLoadingTopMaterials,\n        isFetching: isFetchingTopMaterials,\n        error: errorTopMaterials\n      }), /*#__PURE__*/_jsx(MaterialList, {\n        title: t.coursePage.latestSummaries,\n        materialArray: latestsMaterialsData,\n        isLoading: isLoadingLatestMaterials,\n        isFetching: isFetchingLatestMaterials,\n        error: errorLatestMaterials\n      })]\n    }), !!session && /*#__PURE__*/_jsx(Button, {\n      w: \"16\",\n      h: \"16\",\n      colorScheme: \"purple\",\n      position: \"fixed\",\n      bottom: \"36px\",\n      right: \"36px\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      size: \"lg\",\n      fontSize: \"lg\",\n      onClick: onOpen,\n      children: /*#__PURE__*/_jsx(Icon, {\n        as: FiPaperclip,\n        fontSize: \"32\"\n      })\n    }), /*#__PURE__*/_jsxs(Modal, {\n      isCentered: true,\n      size: \"2xl\",\n      onClose: onClose,\n      isOpen: isOpen,\n      motionPreset: \"slideInBottom\",\n      blockScrollOnMount: false,\n      children: [/*#__PURE__*/_jsx(ModalOverlay, {}), /*#__PURE__*/_jsxs(ModalContent, {\n        bg: \"purple.800\",\n        children: [/*#__PURE__*/_jsx(ModalHeader, {\n          children: t.coursePage.form.newMaterial\n        }), /*#__PURE__*/_jsx(ModalBody, {\n          children: /*#__PURE__*/_jsx(FormControl, {\n            children: /*#__PURE__*/_jsx(Box, {\n              as: \"form\",\n              flex: \"1\",\n              borderRadius: 8,\n              bg: \"purple.800\",\n              px: \"8\",\n              py: \"2\",\n              onSubmit: handleSubmit(handleCreateMaterial),\n              children: /*#__PURE__*/_jsxs(VStack, {\n                spacing: \"4\",\n                children: [/*#__PURE__*/_jsx(Input, {\n                  name: \"name\",\n                  label: t.coursePage.form.name,\n                  description: t.coursePage.form.nameEx,\n                  descriptionColor: \"purple.300\",\n                  focusBorderColor: \"purple.600\",\n                  bg: \"purple.600\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'purple.700'\n                  },\n                  error: errors.name,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Input, {\n                  name: \"description\",\n                  label: t.coursePage.form.description,\n                  focusBorderColor: \"purple.600\",\n                  bg: \"purple.600\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'purple.700'\n                  },\n                  error: errors.description,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Input, {\n                  name: \"image\",\n                  label: t.coursePage.form.imageURL,\n                  description: t.coursePage.form.imageURLEx,\n                  descriptionColor: \"purple.300\",\n                  focusBorderColor: \"purple.600\",\n                  bg: \"purple.600\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'purple.700'\n                  },\n                  error: errors.image,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Input, {\n                  name: \"link\",\n                  label: t.coursePage.form.materialLink,\n                  description: t.coursePage.form.materialLinkEx,\n                  descriptionColor: \"purple.300\",\n                  focusBorderColor: \"purple.600\",\n                  bg: \"purple.600\",\n                  variant: \"filled\",\n                  _hover: {\n                    bgColor: 'purple.700'\n                  },\n                  error: errors.link,\n                  ref: register\n                }), /*#__PURE__*/_jsx(Box, {\n                  w: \"100%\",\n                  justify: \"flex-initial\",\n                  children: /*#__PURE__*/_jsx(Input, {\n                    name: \"tags\",\n                    label: t.coursePage.form.tags,\n                    description: t.coursePage.form.tagsEx,\n                    descriptionColor: \"purple.300\",\n                    focusBorderColor: \"purple.600\",\n                    bg: \"purple.600\",\n                    variant: \"filled\",\n                    _hover: {\n                      bgColor: 'purple.700'\n                    },\n                    error: errors.tags,\n                    ref: register\n                  })\n                })]\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(ModalFooter, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            as: \"a\",\n            colorScheme: \"whiteAlpha\",\n            variant: \"ghost\",\n            onClick: onClose,\n            children: \"Close\"\n          }), /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            colorScheme: \"purple\",\n            _hover: {\n              bgColor: 'purple.600'\n            },\n            ml: \"4\",\n            isLoading: formState.isSubmitting,\n            onClick: handleSubmit(handleCreateMaterial),\n            children: \"Create\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nexport const getServerSideProps = async ({\n  params,\n  req\n}) => {\n  const {\n    id: id\n  } = params;\n  const session = await getSession({\n    req\n  });\n  const currentUserEmail = session === null || session === void 0 ? void 0 : session.user.email;\n  const {\n    data: currentUser\n  } = await supabase.from('users').select('id, name, email, avatar_url, id').eq('email', `${currentUserEmail}`).single();\n  const {\n    data: singleCourseData\n  } = await supabase.from('courses').select('id, id, name, image, likes, id, description, tags').eq('id', String(id)).single();\n  const {\n    data: materialsArray\n  } = await supabase.from('materials').select(`\n    *,\n    users: user_id ( name )\n  `).eq('course_id', String(singleCourseData === null || singleCourseData === void 0 ? void 0 : singleCourseData.id));\n  const {\n    data: liked\n  } = await supabase.from('course_likes').select(`\n        *,\n        users: user_id ( name )\n        `).eq('course_id', String(singleCourseData === null || singleCourseData === void 0 ? void 0 : singleCourseData.id)).eq('user_id', String(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id)).single();\n  const courseLiked = liked !== null;\n  return {\n    props: {\n      singleCourseData,\n      materialsArray,\n      currentUser,\n      courseLiked\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}