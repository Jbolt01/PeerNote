{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { supabase } from '../../../services/supabase';\nexport default NextAuth({\n  providers: [Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\n    scope: 'https://www.googleapis.com/auth/userinfo.email  https://www.googleapis.com/auth/userinfo.profile'\n  })],\n  jwt: {\n    signingKey: process.env.SIGNIN_KEY\n  },\n  callbacks: {\n    async session(session) {\n      return _objectSpread({}, session);\n    },\n\n    async signIn(user, account, profile) {\n      const {\n        name,\n        email,\n        image\n      } = user;\n      const {\n        data: users,\n        error\n      } = await supabase.from('users').select('*').eq('email', email).single(); // if theres a user with the same email as the current user, users.lengh will be 1\n\n      if ((users === null || users === void 0 ? void 0 : users.length) === 0 || users === null) {\n        // an if theres no one with the same email, we will write this new user down\n        await supabase.from('users').insert([{\n          name: `${name}`,\n          avatar_url: `${image}`,\n          email: `${email}`\n        }]);\n      }\n\n      return true;\n    }\n\n  }\n});","map":null,"metadata":{},"sourceType":"module"}