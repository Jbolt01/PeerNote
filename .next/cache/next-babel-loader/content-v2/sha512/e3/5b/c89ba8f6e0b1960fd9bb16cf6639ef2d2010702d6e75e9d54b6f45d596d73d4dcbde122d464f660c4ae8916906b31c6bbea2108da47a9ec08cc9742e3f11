{"ast":null,"code":"/* eslint-disable no-console */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-case-declarations */\nimport { getSession } from 'next-auth/client';\nimport { supabase } from '../../services/supabase';\nexport default async function handler(req, res) {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === 'GET') {\n    const {\n      type,\n      current_user_id,\n      search,\n      course_id,\n      course_slug_number\n    } = req.headers;\n\n    switch (type) {\n      case 'get-user-data':\n        const {\n          data: userData,\n          error: getUserDataError\n        } = await supabase.from('users').select('id, name, email').eq('email', session === null || session === void 0 ? void 0 : session.user.email).single();\n\n        if (getUserDataError) {\n          return res.status(400).send(`Error getting top courses request: ${getUserDataError.message}`);\n        }\n\n        res.status(200).json(userData);\n        break;\n\n      case 'COMMUNITY-get-latest-courses':\n        const {\n          data: courses,\n          error\n        } = await supabase.from('courses').select('id, name, image, likes, materials_available').order('created_at', {\n          ascending: false\n        }).range(0, 2);\n\n        if (error) {\n          return res.status(400).send(`Error getting latest courses request: ${error.message}`);\n        }\n\n        res.status(200).json(courses);\n        break;\n\n      case 'COMMUNITY-get-most-liked-courses':\n        const {\n          data: mostLikedCourses,\n          error: mostLikedCoursesErr\n        } = await supabase.from('courses').select('id, name, image, likes, materials_available').order('likes', {\n          ascending: false\n        });\n\n        if (mostLikedCoursesErr) {\n          return res.status(400).send(`Error getting top courses request: ${mostLikedCoursesErr.message}`);\n        }\n\n        res.status(200).json(mostLikedCourses);\n        break;\n\n      case 'HOME-get-liked-courses':\n        const {\n          data: likedCourses,\n          error: likedCoursesErr\n        } = await supabase.from('course_likes').select(`\n          courses: course_id (id, name, description, image, materials_available, likes)\n        `).order('created_at', {\n          ascending: false\n        }).eq('user_id', current_user_id);\n\n        if (likedCoursesErr) {\n          return res.status(400).send(`Error getting top courses request: ${likedCoursesErr.message}`);\n        }\n\n        const likedCoursesArray = likedCourses ? likedCourses.map(array => array.courses) : [];\n        res.status(200).json(likedCoursesArray);\n        break;\n\n      case 'SEARCH-get-searched-courses':\n        if (search === '') {\n          return res.status(200).json([]);\n        }\n\n        const {\n          data: searchedCourses,\n          error: searchedCoursesErr\n        } = await supabase.from('courses').select('id, name, image, likes, materials_available').order('likes', {\n          ascending: false\n        }) //   .or(`\n        //   name.textSearch.${search},description.textSearch.${search},\n        // `);\n        .textSearch('name', `'${search}'`);\n\n        if (searchedCoursesErr) {\n          return res.status(400).send(`Error getting top courses request: ${searchedCoursesErr.message}`);\n        }\n\n        res.status(200).json(searchedCourses);\n        break;\n\n      case 'SEARCH-get-searched-materials':\n        if (search === '') {\n          return res.status(200).json([]);\n        }\n\n        const {\n          data: searchedMaterials,\n          error: searchedMaterialsErr\n        } = await supabase.from('materials').select(`\n            id, name, image, likes,\n            users: creator_id ( name )\n          `) // .order('likes', { ascending: false })\n        .textSearch('name', `'${search}'`);\n\n        if (searchedMaterialsErr) {\n          return res.status(400).send(`Error getting top materials request: ${searchedMaterialsErr.message}`);\n        }\n\n        res.status(200).json(searchedMaterials);\n        break;\n\n      case 'COURSE-get-latest-materials':\n        const {\n          data: latestMaterials,\n          error: latestMaterialsErr\n        } = await supabase.from('materials').select(`\n            id, name, image, likes,\n            users: creator_id ( name )\n          `).order('created_at', {\n          ascending: false\n        }).eq('course_id', String(course_id));\n\n        if (latestMaterialsErr) {\n          return res.status(400).send(`Error getting latest materials request: ${latestMaterialsErr.message}`);\n        }\n\n        res.status(200).json(latestMaterials);\n        break;\n\n      case 'COURSE-get-top-liked-materials':\n        const {\n          data: topCourseMaterials,\n          error: topCourseMaterialsErr\n        } = await supabase.from('materials').select(`\n          id, name, image, likes,\n          users: creator_id ( name )\n          `).order('likes', {\n          ascending: false\n        }).eq('course_id', String(course_id));\n\n        if (topCourseMaterialsErr) {\n          return res.status(400).send(`Error getting latest materials request: ${topCourseMaterialsErr.message}`);\n        }\n\n        res.status(200).json(topCourseMaterials);\n        break;\n\n      case 'HOME-get-liked-materials':\n        const {\n          data: likedMaterials,\n          error: likedMaterialsErr\n        } = await supabase.from('material_likes').select(`\n          materials: material_id (id, name, description, image, likes, creator_id, users: creator_id (name))\n        `).order('created_at', {\n          ascending: false\n        }).eq('user_id', current_user_id);\n\n        if (likedMaterialsErr) {\n          return res.status(400).send(`Error getting top materials request: ${likedMaterialsErr.message}`);\n        }\n\n        const likedMaterialsArray = likedMaterials ? likedMaterials.map(array => array.materials) : [];\n        res.status(200).json(likedMaterialsArray);\n        break;\n\n      case 'COURSE-increment-course-view':\n        const {\n          data\n        } = await supabase.rpc('incrementcourseview', {\n          row_slug_number: course_slug_number\n        });\n        res.status(200).send(`success: another view added`);\n        break;\n\n      default:\n        throw new Error('Unhandled event');\n    }\n  }\n\n  if (req.method === 'POST') {\n    const {\n      type\n    } = req.body.headers;\n    const reqBody = req.body;\n    const {\n      values,\n      currentUserId,\n      courseId,\n      materialId\n    } = reqBody;\n\n    switch (type) {\n      case 'community-create-course':\n        const {\n          data: courseData,\n          error\n        } = await supabase.from('courses').insert([{\n          name: values.name,\n          description: values.description,\n          image: values.image,\n          tags: values.tags,\n          creator_id: currentUserId\n        }]).single();\n\n        if (error) {\n          return res.status(400).send(`Error creating new Course Thread: ${error.message}`);\n        }\n\n        res.status(200).json({\n          newCourseNumberSlug: courseData.id\n        });\n        break;\n\n      case 'course-create-material':\n        const {\n          data: materialData,\n          error: err\n        } = await supabase.from('materials').insert([{\n          name: values.name,\n          description: values.description,\n          image: values.image,\n          link: values.link,\n          tags: values.tags,\n          creator_id: currentUserId,\n          course_id: courseId\n        }]).single();\n\n        if (err) {\n          return res.status(400).send(`Error creating new Material: ${err.message}`);\n        }\n\n        const {\n          data,\n          error: incrementCourseMaterialError\n        } = await supabase.rpc('incrementcoursematerial', {\n          row_id: courseId\n        });\n\n        if (incrementCourseMaterialError) {\n          return res.status(400).send(`Error creating new Material: ${incrementCourseMaterialError.message}`);\n        }\n\n        res.status(200).json({\n          newMaterialId: materialData.id\n        });\n        break;\n\n      case 'course-like-course':\n        const {\n          error: likeErr\n        } = await supabase.from('course_likes').insert([{\n          course_id: courseId,\n          user_id: currentUserId\n        }]);\n\n        if (likeErr) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        const {\n          error: incrementCourseLikeError\n        } = await supabase.rpc('incrementcourselike', {\n          row_id: courseId\n        });\n\n        if (incrementCourseLikeError) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      case 'course-unlike-course':\n        const {\n          error: unlikeErr\n        } = await supabase.from('course_likes').delete().eq('user_id', currentUserId).eq('course_id', courseId);\n\n        if (unlikeErr) {\n          return res.status(400).send(`Error while unliking: ${error.message}`);\n        }\n\n        const {\n          error: decrementCourseLikeError\n        } = await supabase.rpc('decrementcourselike', {\n          row_id: courseId\n        });\n\n        if (decrementCourseLikeError) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      case 'RESUME-like-material':\n        const {\n          error: likeMaterialErr\n        } = await supabase.from('material_likes').insert([{\n          material_id: materialId,\n          user_id: currentUserId\n        }]);\n\n        if (likeMaterialErr) {\n          return res.status(400).send(`Error while liking: ${likeMaterialErr.message}`);\n        }\n\n        const {\n          error: incrementMaterialLikeError\n        } = await supabase.rpc('incrementmateriallike', {\n          row_id: materialId\n        });\n\n        if (incrementMaterialLikeError) {\n          return res.status(400).send(`Error while liking: ${incrementMaterialLikeError.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      case 'RESUME-unlike-material':\n        const {\n          error: unlikeMaterialErr\n        } = await supabase.from('material_likes').delete().eq('user_id', currentUserId).eq('material_id', materialId);\n\n        if (unlikeMaterialErr) {\n          return res.status(400).send(`Error while unliking: ${unlikeMaterialErr.message}`);\n        }\n\n        const {\n          error: decrementMaterialLikeError\n        } = await supabase.rpc('decrementmateriallike', {\n          row_id: materialId\n        });\n\n        if (decrementMaterialLikeError) {\n          return res.status(400).send(`Error while liking: ${decrementMaterialLikeError.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      default:\n        throw new Error('Unhandled event');\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}