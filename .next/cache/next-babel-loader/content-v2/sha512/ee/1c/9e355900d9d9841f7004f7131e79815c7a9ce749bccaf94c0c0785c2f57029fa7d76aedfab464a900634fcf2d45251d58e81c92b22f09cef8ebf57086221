{"ast":null,"code":"/* eslint-disable no-console */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-case-declarations */\nimport { getSession } from 'next-auth/client';\nimport { supabase } from '../../services/supabase';\nexport default async function handler(req, res) {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === 'GET') {\n    const {\n      type,\n      current_user_id,\n      search,\n      course_id,\n      course_slug_number\n    } = req.headers;\n\n    switch (type) {\n      case 'get-user-data':\n        const {\n          data: userData,\n          error: getUserDataError\n        } = await supabase.from('users').select('id, name, email').eq('email', session === null || session === void 0 ? void 0 : session.user.email).single();\n\n        if (getUserDataError) {\n          return res.status(400).send(`Error getting top courses request: ${getUserDataError.message}`);\n        }\n\n        res.status(200).json(userData);\n        break;\n\n      case 'COMMUNITY-get-latest-courses':\n        const {\n          data: courses,\n          error\n        } = await supabase.from('courses').select('id, name, image, likes, materials_available').order('created_at', {\n          ascending: false\n        }).range(0, 2);\n\n        if (error) {\n          return res.status(400).send(`Error getting latest courses request: ${error.message}`);\n        }\n\n        res.status(200).json(courses);\n        break;\n\n      case 'COMMUNITY-get-most-liked-courses':\n        const {\n          data: mostLikedCourses,\n          error: mostLikedCoursesErr\n        } = await supabase.from('courses').select('id, name, image, likes, materials_available').order('likes', {\n          ascending: false\n        });\n\n        if (mostLikedCoursesErr) {\n          return res.status(400).send(`Error getting top courses request: ${mostLikedCoursesErr.message}`);\n        }\n\n        res.status(200).json(mostLikedCourses);\n        break;\n\n      case 'HOME-get-liked-courses':\n        const {\n          data: likedCourses,\n          error: likedCoursesErr\n        } = await supabase.from('course_likes').select(`\n          courses: course_id (id, name, description, image, materials_available, likes)\n        `).order('created_at', {\n          ascending: false\n        }).eq('user_id', current_user_id);\n\n        if (likedCoursesErr) {\n          return res.status(400).send(`Error getting top courses request: ${likedCoursesErr.message}`);\n        }\n\n        const likedCoursesArray = likedCourses ? likedCourses.map(array => array.courses) : [];\n        res.status(200).json(likedCoursesArray);\n        break;\n\n      case 'SEARCH-get-searched-courses':\n        if (search === '') {\n          return res.status(200).json([]);\n        }\n\n        const {\n          data: searchedCourses,\n          error: searchedCoursesErr\n        } = await supabase.from('courses').select('id, name, image, likes, materials_available').order('likes', {\n          ascending: false\n        }) //   .or(`\n        //   name.textSearch.${search},description.textSearch.${search},\n        // `);\n        .textSearch('name', `'${search}'`);\n\n        if (searchedCoursesErr) {\n          return res.status(400).send(`Error getting top courses request: ${searchedCoursesErr.message}`);\n        }\n\n        res.status(200).json(searchedCourses);\n        break;\n\n      case 'SEARCH-get-searched-materials':\n        if (search === '') {\n          return res.status(200).json([]);\n        }\n\n        const {\n          data: searchedMaterials,\n          error: searchedMaterialsErr\n        } = await supabase.from('materials').select(`\n            id, name, image, likes,\n            users: creator_id ( name )\n          `) // .order('likes', { ascending: false })\n        .textSearch('name', `'${search}'`);\n\n        if (searchedMaterialsErr) {\n          return res.status(400).send(`Error getting top materials request: ${searchedMaterialsErr.message}`);\n        }\n\n        res.status(200).json(searchedMaterials);\n        break;\n\n      case 'COURSE-get-latest-materials':\n        const {\n          data: latestMaterials,\n          error: latestMaterialsErr\n        } = await supabase.from('materials').select(`\n            id, name, image, likes,\n            users: creator_id ( name )\n          `).order('created_at', {\n          ascending: false\n        }).eq('course_id', String(course_id));\n\n        if (latestMaterialsErr) {\n          return res.status(400).send(`Error getting latest materials request: ${latestMaterialsErr.message}`);\n        }\n\n        res.status(200).json(latestMaterials);\n        break;\n\n      case 'COURSE-get-top-liked-materials':\n        const {\n          data: topCourseMaterials,\n          error: topCourseMaterialsErr\n        } = await supabase.from('materials').select(`\n          id, name, image, likes,\n          users: creator_id ( name )\n          `).order('likes', {\n          ascending: false\n        }).eq('course_id', String(course_id));\n\n        if (topCourseMaterialsErr) {\n          return res.status(400).send(`Error getting latest materials request: ${topCourseMaterialsErr.message}`);\n        }\n\n        res.status(200).json(topCourseMaterials);\n        break;\n\n      case 'HOME-get-liked-materials':\n        const {\n          data: likedMaterials,\n          error: likedMaterialsErr\n        } = await supabase.from('material_likes').select(`\n          materials: material_id (id, name, description, image, likes, creator_id, users: creator_id (name))\n        `).order('created_at', {\n          ascending: false\n        }).eq('user_id', current_user_id);\n\n        if (likedMaterialsErr) {\n          return res.status(400).send(`Error getting top materials request: ${likedMaterialsErr.message}`);\n        }\n\n        const likedMaterialsArray = likedMaterials ? likedMaterials.map(array => array.materials) : [];\n        res.status(200).json(likedMaterialsArray);\n        break;\n\n      case 'COURSE-increment-course-view':\n        const {\n          data\n        } = await supabase.rpc('incrementcourseview', {\n          row_slug_number: course_slug_number\n        });\n        res.status(200).send(`success: another view added`);\n        break;\n\n      default:\n        throw new Error('Unhandled event');\n    }\n  }\n\n  if (req.method === 'POST') {\n    const {\n      type\n    } = req.body.headers;\n    const reqBody = req.body;\n    const {\n      values,\n      currentUserId,\n      courseId,\n      materialId\n    } = reqBody;\n\n    switch (type) {\n      case 'community-create-course':\n        const {\n          data: courseData,\n          error\n        } = await supabase.from('courses').insert([{\n          name: values.name,\n          description: values.description,\n          image: values.image,\n          tags: values.tags,\n          creator_id: currentUserId\n        }]).single();\n\n        if (error) {\n          return res.status(400).send(`Error creating new Course Thread: ${error.message}`);\n        }\n\n        res.status(200).json({\n          newCourseNumberSlug: courseData.id\n        });\n        break;\n\n      case 'course-create-material':\n        const {\n          data: materialData,\n          error: err\n        } = await supabase.from('materials').insert([{\n          name: values.name,\n          description: values.description,\n          image: values.image,\n          link: values.link,\n          tags: values.tags,\n          creator_id: currentUserId,\n          course_id: courseId\n        }]).single();\n\n        if (err) {\n          return res.status(400).send(`Error creating new Material: ${err.message}`);\n        }\n\n        const {\n          data,\n          error: incrementCourseMaterialError\n        } = await supabase.rpc('incrementcoursematerial', {\n          row_id: courseId\n        });\n\n        if (incrementCourseMaterialError) {\n          return res.status(400).send(`Error creating new Material: ${incrementCourseMaterialError.message}`);\n        }\n\n        res.status(200).json({\n          newMaterialId: materialData.id\n        });\n        break;\n\n      case 'course-like-course':\n        const {\n          error: likeErr\n        } = await supabase.from('course_likes').insert([{\n          course_id: courseId,\n          user_id: currentUserId\n        }]);\n\n        if (likeErr) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        const {\n          error: incrementCourseLikeError\n        } = await supabase.rpc('incrementcourselike', {\n          row_id: courseId\n        });\n\n        if (incrementCourseLikeError) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      case 'course-unlike-course':\n        const {\n          error: unlikeErr\n        } = await supabase.from('course_likes').delete().eq('user_id', currentUserId).eq('course_id', courseId);\n\n        if (unlikeErr) {\n          return res.status(400).send(`Error while unliking: ${error.message}`);\n        }\n\n        const {\n          error: decrementCourseLikeError\n        } = await supabase.rpc('decrementcourselike', {\n          row_id: courseId\n        });\n\n        if (decrementCourseLikeError) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      case 'RESUME-like-material':\n        const {\n          error: likeMaterialErr\n        } = await supabase.from('material_likes').insert([{\n          material_id: materialId,\n          user_id: currentUserId\n        }]);\n\n        if (likeMaterialErr) {\n          return res.status(400).send(`Error while liking: ${likeMaterialErr.message}`);\n        }\n\n        const {\n          error: incrementMaterialLikeError\n        } = await supabase.rpc('incrementmateriallike', {\n          row_id: materialId\n        });\n\n        if (incrementMaterialLikeError) {\n          return res.status(400).send(`Error while liking: ${incrementMaterialLikeError.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      case 'RESUME-unlike-material':\n        const {\n          error: unlikeMaterialErr\n        } = await supabase.from('material_likes').delete().eq('user_id', currentUserId).eq('material_id', materialId);\n\n        if (unlikeMaterialErr) {\n          return res.status(400).send(`Error while unliking: ${unlikeMaterialErr.message}`);\n        }\n\n        const {\n          error: decrementMaterialLikeError\n        } = await supabase.rpc('decrementmateriallike', {\n          row_id: materialId\n        });\n\n        if (decrementMaterialLikeError) {\n          return res.status(400).send(`Error while liking: ${decrementMaterialLikeError.message}`);\n        }\n\n        res.status(200).json({\n          success: 'success'\n        });\n        break;\n\n      default:\n        throw new Error('Unhandled event');\n    }\n  }\n}","map":{"version":3,"sources":["/Users/vijay/PeerNote/src/pages/api/supaRequests.ts"],"names":["getSession","supabase","handler","req","res","session","method","type","current_user_id","search","course_id","course_slug_number","headers","data","userData","error","getUserDataError","from","select","eq","user","email","single","status","send","message","json","courses","order","ascending","range","mostLikedCourses","mostLikedCoursesErr","likedCourses","likedCoursesErr","likedCoursesArray","map","array","searchedCourses","searchedCoursesErr","textSearch","searchedMaterials","searchedMaterialsErr","latestMaterials","latestMaterialsErr","String","topCourseMaterials","topCourseMaterialsErr","likedMaterials","likedMaterialsErr","likedMaterialsArray","materials","rpc","row_slug_number","Error","body","reqBody","values","currentUserId","courseId","materialId","courseData","insert","name","description","image","tags","creator_id","newCourseNumberSlug","id","materialData","err","link","incrementCourseMaterialError","row_id","newMaterialId","likeErr","user_id","incrementCourseLikeError","success","unlikeErr","delete","decrementCourseLikeError","likeMaterialErr","material_id","incrementMaterialLikeError","unlikeMaterialErr","decrementMaterialLikeError"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable consistent-return */\n/* eslint-disable no-case-declarations */\nimport { Console } from 'console';\nimport { getSession } from 'next-auth/client';\nimport { supabase } from '../../services/supabase';\n\nexport default async function handler(req, res) {\n  const session = await getSession({ req });\n\n  if (req.method === 'GET') {\n    const { type, current_user_id, search, course_id, course_slug_number } =\n      req.headers;\n\n    switch (type) {\n      case 'get-user-data':\n        const { data: userData, error: getUserDataError } = await supabase\n          .from('users')\n          .select('id, name, email')\n          .eq('email', session?.user.email)\n          .single();\n\n        if (getUserDataError) {\n          return res\n            .status(400)\n            .send(\n              `Error getting top courses request: ${getUserDataError.message}`\n            );\n        }\n\n        res.status(200).json(userData);\n        break;\n\n      case 'COMMUNITY-get-latest-courses':\n        const { data: courses, error } = await supabase\n          .from('courses')\n          .select('id, name, image, likes, materials_available')\n          .order('created_at', { ascending: false })\n          .range(0, 2);\n\n        if (error) {\n          return res\n            .status(400)\n            .send(`Error getting latest courses request: ${error.message}`);\n        }\n\n        res.status(200).json(courses);\n        break;\n\n      case 'COMMUNITY-get-most-liked-courses':\n        const { data: mostLikedCourses, error: mostLikedCoursesErr } =\n          await supabase\n            .from('courses')\n            .select('id, name, image, likes, materials_available')\n            .order('likes', { ascending: false });\n\n        if (mostLikedCoursesErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting top courses request: ${mostLikedCoursesErr.message}`\n            );\n        }\n\n        res.status(200).json(mostLikedCourses);\n        break;\n\n      case 'HOME-get-liked-courses':\n        const { data: likedCourses, error: likedCoursesErr } = await supabase\n          .from('course_likes')\n          .select(\n            `\n          courses: course_id (id, name, description, image, materials_available, likes)\n        `\n          )\n          .order('created_at', { ascending: false })\n          .eq('user_id', current_user_id);\n\n        if (likedCoursesErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting top courses request: ${likedCoursesErr.message}`\n            );\n        }\n\n        const likedCoursesArray = likedCourses\n          ? likedCourses.map(array => array.courses)\n          : [];\n\n        res.status(200).json(likedCoursesArray);\n        break;\n\n      case 'SEARCH-get-searched-courses':\n        if (search === '') {\n          return res.status(200).json([]);\n        }\n        const { data: searchedCourses, error: searchedCoursesErr } =\n          await supabase\n            .from('courses')\n            .select('id, name, image, likes, materials_available')\n            .order('likes', { ascending: false })\n            //   .or(`\n            //   name.textSearch.${search},description.textSearch.${search},\n            // `);\n            .textSearch('name', `'${search}'`);\n\n        if (searchedCoursesErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting top courses request: ${searchedCoursesErr.message}`\n            );\n        }\n\n        res.status(200).json(searchedCourses);\n        break;\n\n      case 'SEARCH-get-searched-materials':\n        if (search === '') {\n          return res.status(200).json([]);\n        }\n        const { data: searchedMaterials, error: searchedMaterialsErr } =\n          await supabase\n            .from('materials')\n            .select(\n              `\n            id, name, image, likes,\n            users: creator_id ( name )\n          `\n            )\n            // .order('likes', { ascending: false })\n            .textSearch('name', `'${search}'`);\n\n        if (searchedMaterialsErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting top materials request: ${searchedMaterialsErr.message}`\n            );\n        }\n\n        res.status(200).json(searchedMaterials);\n        break;\n\n      case 'COURSE-get-latest-materials':\n        const { data: latestMaterials, error: latestMaterialsErr } = await supabase\n          .from('materials')\n          .select(\n            `\n            id, name, image, likes,\n            users: creator_id ( name )\n          `\n          )\n          .order('created_at', { ascending: false })\n          .eq('course_id', String(course_id));\n\n        if (latestMaterialsErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting latest materials request: ${latestMaterialsErr.message}`\n            );\n        }\n\n        res.status(200).json(latestMaterials);\n        break;\n\n      case 'COURSE-get-top-liked-materials':\n        const { data: topCourseMaterials, error: topCourseMaterialsErr } =\n          await supabase\n            .from('materials')\n            .select(\n              `\n          id, name, image, likes,\n          users: creator_id ( name )\n          `\n            )\n            .order('likes', { ascending: false })\n            .eq('course_id', String(course_id));\n\n        if (topCourseMaterialsErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting latest materials request: ${topCourseMaterialsErr.message}`\n            );\n        }\n\n        res.status(200).json(topCourseMaterials);\n        break;\n\n      case 'HOME-get-liked-materials':\n        const { data: likedMaterials, error: likedMaterialsErr } = await supabase\n          .from('material_likes')\n          .select(\n            `\n          materials: material_id (id, name, description, image, likes, creator_id, users: creator_id (name))\n        `\n          )\n          .order('created_at', { ascending: false })\n          .eq('user_id', current_user_id);\n\n        if (likedMaterialsErr) {\n          return res\n            .status(400)\n            .send(\n              `Error getting top materials request: ${likedMaterialsErr.message}`\n            );\n        }\n\n        const likedMaterialsArray = likedMaterials\n          ? likedMaterials.map(array => array.materials)\n          : [];\n\n        res.status(200).json(likedMaterialsArray);\n        break;\n\n      case 'COURSE-increment-course-view':\n        const { data } = await supabase.rpc('incrementcourseview', {\n          row_slug_number: course_slug_number,\n        });\n        res.status(200).send(`success: another view added`);\n        break;\n\n      default:\n        throw new Error('Unhandled event');\n    }\n  }\n\n  if (req.method === 'POST') {\n    const { type } = req.body.headers;\n\n    const reqBody = req.body;\n    const { values, currentUserId, courseId, materialId } = reqBody;\n\n    switch (type) {\n      case 'community-create-course':\n        const { data: courseData, error } = await supabase\n          .from('courses')\n          .insert([\n            {\n              name: values.name,\n              description: values.description,\n              image: values.image,\n              tags: values.tags,\n              creator_id: currentUserId,\n            },\n          ])\n          .single();\n\n        if (error) {\n          return res\n            .status(400)\n            .send(`Error creating new Course Thread: ${error.message}`);\n        }\n\n        res.status(200).json({ newCourseNumberSlug: courseData.id });\n        break;\n\n      case 'course-create-material':\n        const { data: materialData, error: err } = await supabase\n          .from('materials')\n          .insert([\n            {\n              name: values.name,\n              description: values.description,\n              image: values.image,\n              link: values.link,\n              tags: values.tags,\n              creator_id: currentUserId,\n              course_id: courseId,\n            },\n          ])\n          .single();\n\n        if (err) {\n          return res\n            .status(400)\n            .send(`Error creating new Material: ${err.message}`);\n        }\n\n        const { data, error: incrementCourseMaterialError } = await supabase.rpc(\n          'incrementcoursematerial',\n          {\n            row_id: courseId,\n          }\n        );\n\n        if (incrementCourseMaterialError) {\n          return res\n            .status(400)\n            .send(\n              `Error creating new Material: ${incrementCourseMaterialError.message}`\n            );\n        }\n\n        res.status(200).json({ newMaterialId: materialData.id });\n\n        break;\n\n      case 'course-like-course':\n        const { error: likeErr } = await supabase.from('course_likes').insert([\n          {\n            course_id: courseId,\n            user_id: currentUserId,\n          },\n        ]);\n\n        if (likeErr) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        const { error: incrementCourseLikeError } = await supabase.rpc(\n          'incrementcourselike',\n          {\n            row_id: courseId,\n          }\n        );\n\n        if (incrementCourseLikeError) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        res.status(200).json({ success: 'success' });\n        break;\n\n      case 'course-unlike-course':\n        const { error: unlikeErr } = await supabase\n          .from('course_likes')\n          .delete()\n          .eq('user_id', currentUserId)\n          .eq('course_id', courseId);\n\n        if (unlikeErr) {\n          return res.status(400).send(`Error while unliking: ${error.message}`);\n        }\n\n        const { error: decrementCourseLikeError } = await supabase.rpc(\n          'decrementcourselike',\n          {\n            row_id: courseId,\n          }\n        );\n        if (decrementCourseLikeError) {\n          return res.status(400).send(`Error while liking: ${error.message}`);\n        }\n\n        res.status(200).json({ success: 'success' });\n        break;\n\n      case 'RESUME-like-material':\n        const { error: likeMaterialErr } = await supabase\n          .from('material_likes')\n          .insert([{ material_id: materialId, user_id: currentUserId }]);\n\n        if (likeMaterialErr) {\n          return res\n            .status(400)\n            .send(`Error while liking: ${likeMaterialErr.message}`);\n        }\n\n        const { error: incrementMaterialLikeError } = await supabase.rpc(\n          'incrementmateriallike',\n          {\n            row_id: materialId,\n          }\n        );\n\n        if (incrementMaterialLikeError) {\n          return res\n            .status(400)\n            .send(`Error while liking: ${incrementMaterialLikeError.message}`);\n        }\n\n        res.status(200).json({ success: 'success' });\n        break;\n\n      case 'RESUME-unlike-material':\n        const { error: unlikeMaterialErr } = await supabase\n          .from('material_likes')\n          .delete()\n          .eq('user_id', currentUserId)\n          .eq('material_id', materialId);\n\n        if (unlikeMaterialErr) {\n          return res\n            .status(400)\n            .send(`Error while unliking: ${unlikeMaterialErr.message}`);\n        }\n\n        const { error: decrementMaterialLikeError } = await supabase.rpc(\n          'decrementmateriallike',\n          {\n            row_id: materialId,\n          }\n        );\n        if (decrementMaterialLikeError) {\n          return res\n            .status(400)\n            .send(`Error while liking: ${decrementMaterialLikeError.message}`);\n        }\n\n        res.status(200).json({ success: 'success' });\n        break;\n\n      default:\n        throw new Error('Unhandled event');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}