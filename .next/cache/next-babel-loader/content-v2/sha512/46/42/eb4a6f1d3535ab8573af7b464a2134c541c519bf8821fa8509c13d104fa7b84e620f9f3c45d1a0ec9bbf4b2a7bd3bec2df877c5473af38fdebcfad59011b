{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/vijay/PeerNote/src/components/form/input.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable react/require-default-props */\nimport { FormControl, FormLabel, Text, FormErrorMessage, Input as ChakraInput } from '@chakra-ui/react';\nimport { forwardRef } from 'react';\nimport { Flex } from '@chakra-ui/react';\n\nconst InputBase = (_ref, ref) => {\n  let {\n    name,\n    label,\n    description,\n    descriptionColor,\n    error = null\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"label\", \"description\", \"descriptionColor\", \"error\"]);\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [!!label && /*#__PURE__*/_jsxDEV(FormLabel, {\n        htmlFor: name,\n        children: [\" \", label, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), !!description && /*#__PURE__*/_jsxDEV(Text, {\n        as: \"cite\",\n        color: descriptionColor,\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChakraInput, _objectSpread({\n      id: name,\n      name: name,\n      focusBorderColor: \"purple.500\",\n      bg: \"purple.550\",\n      variant: \"filled\",\n      _hover: {\n        bgColor: 'purple.550'\n      },\n      size: \"lg\",\n      ref: ref\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), !!error && /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\nexport const Input = /*#__PURE__*/forwardRef(InputBase);","map":{"version":3,"sources":["/Users/vijay/PeerNote/src/components/form/input.tsx"],"names":["FormControl","FormLabel","Text","FormErrorMessage","Input","ChakraInput","forwardRef","Flex","InputBase","ref","name","label","description","descriptionColor","error","rest","bgColor","message"],"mappings":";;;;;;;;;;;;;AAAA;AACA,SACEA,WADF,EAEEC,SAFF,EAGEC,IAHF,EAIEC,gBAJF,EAKEC,KAAK,IAAIC,WALX,QAOO,kBAPP;AASA,SAASC,UAAT,QAAqD,OAArD;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAUA,MAAMC,SAAiE,GAAG,OAExEC,GAFwE,KAGrE;AAAA,MAFH;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA,gBAA5B;AAA8CC,IAAAA,KAAK,GAAG;AAAtD,GAEG;AAAA,MAF4DC,IAE5D;;AACH,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACD,KAA1B;AAAA,4BACE,QAAC,IAAD;AAAA,iBACG,CAAC,CAACH,KAAF,iBAAW,QAAC,SAAD;AAAW,QAAA,OAAO,EAAED,IAApB;AAAA,wBAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,cADd,EAEG,CAAC,CAACC,WAAF,iBACC,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,MAAT;AAAgB,QAAA,KAAK,EAAEC,gBAAvB;AAAA,kBACGD;AADH;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,WAAD;AACE,MAAA,EAAE,EAAEF,IADN;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,gBAAgB,EAAC,YAHnB;AAIE,MAAA,EAAE,EAAC,YAJL;AAKE,MAAA,OAAO,EAAC,QALV;AAME,MAAA,MAAM,EAAE;AACNM,QAAAA,OAAO,EAAE;AADH,OANV;AASE,MAAA,IAAI,EAAC,IATP;AAUE,MAAA,GAAG,EAAEP;AAVP,OAWMM,IAXN;AAAA;AAAA;AAAA;AAAA,YATF,EAsBG,CAAC,CAACD,KAAF,iBAAW,QAAC,gBAAD;AAAA,gBAAmBA,KAAK,CAACG;AAAzB;AAAA;AAAA;AAAA;AAAA,YAtBd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA9BD;;AAgCA,OAAO,MAAMb,KAAK,gBAAGE,UAAU,CAACE,SAAD,CAAxB","sourcesContent":["/* eslint-disable react/require-default-props */\nimport {\n  FormControl,\n  FormLabel,\n  Text,\n  FormErrorMessage,\n  Input as ChakraInput,\n  InputProps as ChakraInputProps,\n} from '@chakra-ui/react';\nimport { FieldError } from 'react-hook-form';\nimport { forwardRef, ForwardRefRenderFunction } from 'react';\nimport { Flex } from '@chakra-ui/react';\n\ninterface InputProps extends ChakraInputProps {\n  name: string;\n  label?: string;\n  error?: FieldError;\n  description?: string;\n  descriptionColor?: string;\n}\n\nconst InputBase: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  { name, label, description, descriptionColor, error = null, ...rest },\n  ref\n) => {\n  return (\n    <FormControl isInvalid={!!error}>\n      <Flex>\n        {!!label && <FormLabel htmlFor={name}> {label} </FormLabel>}\n        {!!description && (\n          <Text as=\"cite\" color={descriptionColor}>\n            {description}\n          </Text>\n        )}\n      </Flex>\n      <ChakraInput\n        id={name}\n        name={name}\n        focusBorderColor=\"purple.500\"\n        bg=\"purple.550\"\n        variant=\"filled\"\n        _hover={{\n          bgColor: 'purple.550',\n        }}\n        size=\"lg\"\n        ref={ref}\n        {...rest}\n      />\n      {!!error && <FormErrorMessage>{error.message}</FormErrorMessage>}\n    </FormControl>\n  );\n};\n\nexport const Input = forwardRef(InputBase);\n"]},"metadata":{},"sourceType":"module"}